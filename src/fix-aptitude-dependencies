#!/usr/bin/perl
#
# fix-aptitude-dependencies
# https://github.com/syam44/fix-aptitude-dependencies
#
# Distributed under the GNU General Public License version 3
# https://www.gnu.org/copyleft/gpl.html
#
# Authors: syam (aks92@free.fr)
#
# Description: Aide à la gestion des dépendances pour Debian apt(itude).
# Explications: https://www.debian-fr.org/aptitude-gestion-des-dependances-et-orphelins-t35575.html
#
use strict;
use warnings;
use diagnostics;

use locale;
use English qw(-no_match_vars);
use feature qw(say);

use utf8;
binmode(STDIN, ':utf8');
binmode(STDOUT, ':utf8');
binmode(STDERR, ':utf8');

use File::Basename ();
use List::Util     qw(max);

use Readonly       ();
use AppConfig      qw(:argcount);


#-----------------------------------------------------------------------------
# Static script configuration
#-----------------------------------------------------------------------------
Readonly::Scalar my $CONFIG_FILE => '/etc/apt/fix-aptitude-dependencies.conf';
Readonly::Scalar my $LOCK_DIR    => '/tmp/fix-aptitude-dependencies.lock';


#-----------------------------------------------------------------------------
# Global script variables
#-----------------------------------------------------------------------------
my $aptitudeBug_PatternPendingActions = 0;
my $lockDirCreated                    = 0;
my $hasNcursesTput                    = undef;


#-----------------------------------------------------------------------------
# Global script constants
#-----------------------------------------------------------------------------
Readonly::Scalar my $COLOR_NONE     => termColor(8, 0);
Readonly::Scalar my $COLOR_ERROR    => termColor(4, 1);    # Bright red
Readonly::Scalar my $COLOR_WARN     => termColor(6, 1);    # Bright yellow
Readonly::Scalar my $COLOR_ARGUMENT => termColor(3, 0);    # Dark cyan
Readonly::Scalar my $SCRIPT_NAME    => $COLOR_ARGUMENT . File::Basename::basename($::PROGRAM_NAME) . $COLOR_NONE;
Readonly::Scalar my $CONFIG_NAME    => $COLOR_ARGUMENT . $CONFIG_FILE . $COLOR_NONE;
Readonly::Scalar my $REGEX_TRIM_L   => qr/^[ \t]+/;
Readonly::Scalar my $REGEX_TRIM_R   => qr/[ \t]+$/;


#-----------------------------------------------------------------------------
# main()
#-----------------------------------------------------------------------------
# English output for all shell commands, makes it easier to parse
local $ENV{'LANG'}     = '';
local $ENV{'LANGUAGE'} = '';

if ($::UID != 0) {
  say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} vous devez être ${COLOR_ARGUMENT}root${COLOR_NONE} pour exécuter ce script.";
  exit 255;
}
checkAptitudeVersion();
Readonly::Scalar my $CONFIG => configRead();
createLockDir();
aptitudeCheckCleanState();
aptitudeMarkAuto();
deborphanDetect();
system($CONFIG->get('user-cleanup'));
exit 0;


#-----------------------------------------------------------------------------
# Aptitude helper functions
#-----------------------------------------------------------------------------

#
# Aptitude availability and version
#
# BUG: Version detection is mandatory because of bug #603862 which impacts
# ~a search patterns in versions 0.6.3, 0.6.4, 0.6.5.
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=603862
#
sub checkAptitudeVersion {
  my $aptitudeVersion = qx{aptitude --version 2>/dev/null};
  $aptitudeBug_PatternPendingActions = 0;

  if (!$aptitudeVersion) {
    say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} ${COLOR_ARGUMENT}aptitude${COLOR_NONE} n'a pas été trouvé.";
    exit 255;
  }
  elsif ($aptitudeVersion !~ m/^aptitude ([^ ]+) /) {
    say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} Impossible de déterminer la version d'${COLOR_ARGUMENT}aptitude${COLOR_NONE}.";
    exit 255;
  }
  else {
    $aptitudeVersion = $1;
  }

  if (($aptitudeVersion eq '0.6.3') || ($aptitudeVersion eq '0.6.4') || ($aptitudeVersion eq '0.6.5')) {
    $aptitudeBug_PatternPendingActions = 1;
  }
  else {
    # aptitude 0.6.6 fixes #603862
    my ($major, $minor, $build) = $aptitudeVersion =~ /^([^.]+)\.([^.]+)\.([^.]+)/;
    if (($major == 0) && (($minor < 6) || (($minor < 6) && ($build < 6)))) {
      say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} La version ${COLOR_ARGUMENT}${aptitudeVersion}${COLOR_NONE} d'${COLOR_ARGUMENT}aptitude${COLOR_NONE} n'est pas supportée.";
      exit 255;
    }
  }
}

#
# Return a search pattern that allows aptitude to identify pending actions.
# This is necessary because of bug #603862.
#
sub aptitudePattern_PendingActions {
  if ($aptitudeBug_PatternPendingActions) {
    return '!~aupgrade';
  }
  else {
    return '~ainstall|~areinstall|~aupgrade|~adowngrade|~aremove|~apurge';
  }
}

#
# Check that there is no pending action or broken package.
# Otherwise, display the corresponding packages and exit.
#
sub aptitudeCheckCleanState {
  say 'Recherche des actions prévues et des dépendances cassées...';
  my $pattern = aptitudePattern_PendingActions();
  my @result  = qx{aptitude search '~b|($pattern)' -F '%c%a%M %v %V %p'};
  if (@result) {
    say '';
    alignArrayElements(['État', 'Depuis', 'Vers', 'Paquet'], @result);
    say '';
    say "${COLOR_WARN}ATTENTION :${COLOR_NONE} ${SCRIPT_NAME} ne peut pas continuer. Veuillez appliquer ou annuler les actions prévues, et résoudre les dépendances cassées avant de relancer ${SCRIPT_NAME}.";
    say "    Pour annuler les actions prévues, utilisez « ${COLOR_ARGUMENT}aptitude keep '!~v'${COLOR_NONE} ».";
    exit 1;
  }
}

#
# Return a search pattern corresponding to the exact names of the packages
# given as input.
#
# Usage: aptitudePattern_ExactNames qw(PACKAGE1 PACKAGE2 ... PACKAGEn)
#
sub aptitudePattern_ExactNames {
  my @patterns = map { "?exact-name($_)" } @_;
  my $pattern  = join(',', @patterns);
  if ($pattern) {
    $pattern = "?or($pattern)";
  }
  return $pattern;
}

#
# Put as much packages as possible in automatic state.
# Packages mentioned in $CONFIG->get('manual-packages') are
# kept in manual state.
#
# Circular dependencies will be scheduled for deletion, which is later
# corrected by aptitudeDetectCircularDependencies().
#
sub aptitudeMarkAuto {
  say 'Marquage des paquets en « Automatique » en fonction des dépendances des paquets...';

  # Search potential automatic packages
  my @autoPackages = qx{aptitude search '~i((~Rdepends:~i)|(~Rpredepends:~i)|(~Rrecommends:~i))' -F '%p'};
  trimArrayR(@autoPackages);

  # Exclude manual packages from the potential automatic packages
  my %manualPackages = map { $_ => 1 } split(' ', $CONFIG->get('manual-packages'));
  @autoPackages = grep { !exists $manualPackages{$_} } @autoPackages;

  qx{aptitude --schedule-only unmarkauto '~i'};
  if (@autoPackages) {
    my $pattern = aptitudePattern_ExactNames(@autoPackages);
    qx{aptitude --schedule-only -o 'Aptitude::Delete-Unused=true' markauto '$pattern'};
  }

  aptitudeDetectCircularDependencies();
}

#
# Search circular dependencies, based on the packages that are left in deleted
# state by aptitudeMarkAuto().
#
sub aptitudeDetectCircularDependencies {
  say 'Recherche des dépendances circulaires...';
  my $pattern         = aptitudePattern_PendingActions();
  my @pendingPackages = qx{aptitude search '$pattern' -F '%p'};
  if (@pendingPackages) {
    trimArrayR(@pendingPackages);
    say '';
    say "${COLOR_WARN}ATTENTION :${COLOR_NONE} des paquets marqués en « Automatique » contiennent des dépendances circulaires.";

    # Put all pending packages in manual state (cyclic packages and their dependencies)
    $pattern = aptitudePattern_ExactNames(@pendingPackages);
    qx{aptitude --schedule-only keep '$pattern'};

    # Gather apt-cache information
    my %aptCache        = aptitudePrepareCache(@pendingPackages);
    my @acyclicPackages = aptitudeCycles_ReduceAcyclic(\%aptCache);
    my @packageCycles   = aptitudeCycles_FindCycles(%aptCache);

    if (@acyclicPackages) {
      $pattern = aptitudePattern_ExactNames(@acyclicPackages);
      qx{aptitude --schedule-only -o 'Aptitude::Delete-Unused=true' markauto '$pattern'};
    }
    aptitudeDisplayPackages(keys %aptCache);
    say '';

    # Display package cycles
    say 'Les différentes chaînes de dépendances circulaires sont :';
    foreach my $cycle (@packageCycles) {
      say '    * ' . $cycle;
    }
    say '';
    say "La procédure correcte est de rajouter à la liste « ${COLOR_ARGUMENT}manual-packages${COLOR_NONE} » de ${CONFIG_NAME} au moins un paquet de chaque chaîne de dépendances circulaires afin de casser les cycles de dépendances, puis de relancer ${SCRIPT_NAME} pour appliquer la nouvelle configuration. En attendant, ces paquets ont tous été marqués en « Manuel », ce qui n'est probablement pas le résultat souhaité mais permet d'éviter leur suppression accidentelle.";
    say '';

    # Double-check: there should be no pending action now.
    # This test is not strictly necessary, but better safe than sorry (bugs happen).
    $pattern         = aptitudePattern_PendingActions();
    @pendingPackages = qx{aptitude search '$pattern' -F '%p'};
    if (@pendingPackages) {
      trimArrayR(@pendingPackages);
      # Whoops something went wrong in the cycles detection algorithm!
      say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} il y a un bug dans l'identification des dépendances circulaires.";
      say STDERR "    Les paquets suivants ne sont pas censés faire partie d'une chaîne de dépendances circulaires mais ${COLOR_ARGUMENT}aptitude${COLOR_NONE} dit le contraire.";
      $pattern = aptitudePattern_ExactNames(@pendingPackages);
      qx{aptitude --schedule-only keep '$pattern'};
      aptitudeDisplayPackages(@pendingPackages);
      exit 255;
    }
  }
}

#
# Display a list of packages.
#
# Usage: aptitudeDisplayPackages qw(PACKAGE1 PACKAGE2 ... PACKAGEn)
#
sub aptitudeDisplayPackages {
  my $pattern  = aptitudePattern_ExactNames(@_);
  if ($pattern) {
    my @result = qx{aptitude search '$pattern' -F '%c%a%M %v %p'};
    if (@result) {
      say '';
      alignArrayElements(['État', 'Version', 'Paquet'], @result);
    }
  }
}

#
# Gather dependency information from apt-cache.
# Only PreDepends, Depends and Recommends are considered.
# Dependencies on virtual packages (Provides) are added back.
#
# Usage: aptitudePrepareCache qw(PACKAGE1 PACKAGE2 ... PACKAGEn)
#
sub aptitudePrepareCache {
  my %aptDepends  = ();
  my %aptProvides = ();

  my $pattern     = aptitudePattern_ExactNames(@_);
  my @packageInfo = qx{aptitude show '$pattern'};
  chomp @packageInfo;

  my $regexPackage       = qr/^Package:[ \t]+([^ \t]+)/;
  my $regexDependency    = qr/^(?:PreDepends|Depends|Recommends):[ \t]+(.*)$/;
  my $regexProvides      = qr/^Provides:[ \t]+(.*)$/;
  my $regexEmpty         = qr/^[ \t]*$/;
  my $regexContinued     = qr/^[ \t]+([^ \t].*)$/;
  my $regexRemoveGarbage = qr/[ \t]|([(][^)]*[)])/;
  my $regexSplit         = qr/[,|]+/;

  my $linesCount = @packageInfo;
  my $currentLine;

  my $continueLine = sub {
    my $line = shift;
    ${$line} .= ',' . $1;
    for (++$currentLine; $currentLine < $linesCount; ++$currentLine) {
      # Continued line
      if ($packageInfo[$currentLine] =~ m/$regexContinued/) {
        ${$line} .= $1;
      }
      else {
        --$currentLine;    # Back off
        last;
      }
    }
  };
  my $cleanupLine = sub {
    my $line = shift;
    $line =~ s/$regexRemoveGarbage//g;
    return grep { $_ ne '' } split(/$regexSplit/, $line);
  };

  for ($currentLine = 0; $currentLine < $linesCount; ++$currentLine) {
    # Package
    if ($packageInfo[$currentLine] =~ m/$regexPackage/) {
      my $package      = $1;
      my $dependencies = '';
      my $provides     = '';
      for (++$currentLine; $currentLine < $linesCount; ++$currentLine) {
        # Dependency
        if ($packageInfo[$currentLine] =~ m/$regexDependency/) {
          $continueLine->(\$dependencies);
        }
        # Provides
        elsif ($packageInfo[$currentLine] =~ m/$regexProvides/) {
          $continueLine->(\$provides);
        }
        # Next package
        elsif ($packageInfo[$currentLine] =~ m/$regexEmpty/) {
          last;
        }
      }
      my %dependencies = map { $_ => 1 } $cleanupLine->($dependencies);
      my @provides = $cleanupLine->($provides);
      if (%dependencies) {
        $aptDepends{$package} = \%dependencies;
      }
      if (@provides) {
        $aptProvides{$package} = \@provides;
      }
    }
  }

  # Add virtual package providers back to virtual dependencies
  while (my ($package, $dependencies) = each %aptDepends) {
    while (my ($providerPackage, $provided) = each %aptProvides) {
      foreach my $virtual (@{$provided}) {
        if (exists ${$dependencies}{$virtual}) {
          ${$dependencies}{$providerPackage} = 1;
        }
      }
    }
  }
  return %aptDepends;
}

#
# Reduce the dependency cache in place so that only cyclic packages are kept.
# Return an array of acyclic packages.
#
sub aptitudeCycles_ReduceAcyclic {
  my $aptCache        = shift;
  my %acyclicPackages = ();

  my @cacheKeys  = keys %{$aptCache};
  my $cacheCount = @cacheKeys;
  while (1) {
    foreach my $package (@cacheKeys) {
      my $dependencies = ${$aptCache}{$package};
      foreach (keys %{$dependencies}) {
        unless (exists ${$aptCache}{$_}) {
          delete ${$dependencies}{$_};
        }
      }
      unless (%{$dependencies}) {
        delete ${$aptCache}{$package};
        $acyclicPackages{$package} = 1;
      }
    }
    @cacheKeys = keys %{$aptCache};
    my $newCacheCount = @cacheKeys;
    last if ($cacheCount == $newCacheCount);
    $cacheCount = $newCacheCount;
  }
  return keys %acyclicPackages;
}

#
# Find the various package cycles.
#
sub aptitudeCycles_FindCycles {
  my %aptCache = @_;
  my %seen     = ();
  my @cycles   = ();

  my $followCycle = sub {
    my $recurse = sub {
      my ($recurse, $package) = @_;
      return () if exists $seen{$package};
      $seen{$package} = 1;
      my @cycle = ($package => 1);
      foreach my $dependency (keys %{$aptCache{$package}}) {
        push(@cycle, $recurse->($recurse, $dependency));
      }
      return @cycle;
    };
    return $recurse->($recurse, @_);
  };

  foreach my $package (keys %aptCache) {
    my %cycle = $followCycle->($package);
    my @cycle = sort(keys %cycle);
    if (@cycle) {
      push(@cycles, join(', ', @cycle));
    }
  }
  @cycles = sort(@cycles);
  return @cycles;
}


#-----------------------------------------------------------------------------
# Deborphan
#-----------------------------------------------------------------------------
sub deborphanDetect {
  my @ignored = qx{deborphan -L};
  if ($::CHILD_ERROR >> 8) {
    say 'deborphan n\'est pas installé, impossible de déterminer les bibliothèques orphelines.';
  }
  else {
    chomp @ignored;
    my $ignored = scalar @ignored;
    $ignored = ( $ignored == 0 ? 'aucune ignorée'
               : $ignored == 1 ? $ignored . ' ignorée'
                               : $ignored . ' ignorées');
    my $command = $CONFIG->get('custom-deborphan');
    my @orphans = qx{$command};
    my $orphans = scalar @orphans;
    if ($orphans) {
      $orphans = ( $orphans == 1 ? $orphans . ' bibliothèque orpheline'
                                 : $orphans . ' bibliothèques orphelines');
      trimArrayR(@orphans);
      foreach (@orphans) {
        s@^([a-zA-Z0-9+.-]+).*?$@$1@g;
      }
      say '';
      say "${COLOR_WARN}deborphan :${COLOR_NONE} $orphans ($ignored). Si vous êtes certain(e) que ces paquets ne vous sont pas utiles, vous pouvez les supprimer manuellement.";
      say "    Pour que ces paquets n'apparaissent plus comme orphelins, utilisez « ${COLOR_ARGUMENT}deborphan -A${COLOR_NONE} » (cf. ${COLOR_ARGUMENT}man deborphan${COLOR_NONE}).";
      aptitudeDisplayPackages(@orphans);
    }
    else {
      say "deborphan : aucune bibliothèque orpheline ($ignored).";
    }
  }
}


#-----------------------------------------------------------------------------
# Configuration file
#-----------------------------------------------------------------------------
sub configRead {
  my $config = AppConfig->new({ CASE => 1,
                                ERROR => \&configError,
                                GLOBAL => { DEFAULT => '',
                                            ARGCOUNT => ARGCOUNT_ONE,
                                          },
                              },
                              qw(manual-packages user-cleanup custom-deborphan)
                            );

  $config->file($CONFIG_FILE);
  my $manual = $config->get('manual-packages');
  $manual =~ s@\n@ @g;
  $manual =~ s@\t@ @g;
  $manual =~ s@ +@ @g;
  trimArrayLR($manual);
  $config->set('manual-packages', $manual);
  return $config;
}


sub configError {
  my @args = @_;
  say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} le fichier de configuration « $CONFIG_NAME » est incorrect. " . ${COLOR_ARGUMENT} . join(' ', @_) . ${COLOR_NONE};
  exit 255;
}


#-----------------------------------------------------------------------------
# Lock directory (global instance mutex)
#
# Note: better use a directory than a file, it works better with NFS
#-----------------------------------------------------------------------------
sub createLockDir {
  unless (mkdir $LOCK_DIR) {
    say STDERR "${COLOR_ERROR}ERREUR :${COLOR_NONE} le dossier « ${COLOR_ARGUMENT}${LOCK_DIR}${COLOR_NONE} » existe déjà, ce qui indique que ${SCRIPT_NAME} est probablement déjà en cours d'exécution.";
    say STDERR "   Si vous êtes certain(e) que ce n'est pas le cas, cela indique probablement que le script s'est arrêté de manière inattendue lors de sa précédente invocation, veuillez alors supprimer manuellement le dossier « ${COLOR_ARGUMENT}${LOCK_DIR}${COLOR_NONE} » et relancer ${SCRIPT_NAME}.";
    exit 255;
  }
  else {
    $lockDirCreated = 1;
  }
}

#
# Remove the directory on exit.
#
END {
  if ($lockDirCreated) {
    rmdir $LOCK_DIR;
  }
}


#-----------------------------------------------------------------------------
# Array utilities
#-----------------------------------------------------------------------------

#
# TrimLR an array in place (chomp, left/right trim).
#
sub trimArrayLR {
  trimArrayR(@_);
  foreach (@_) {
    s/$REGEX_TRIM_L//;
  }
}

#
# TrimR an array in place (chomp, right trim).
#
sub trimArrayR {
  chomp @_;
  foreach (@_) {
    s/$REGEX_TRIM_R//;
  }
}

#
# Align space-separated array elements and headers.
#
# Usage: alignArray [HEADER1, ... HEADERn], ROW1, ... ROWn
#
sub alignArrayElements {
  my @headers = @{(shift)};
  my @rows    = @_;

  my $num_columns = scalar @headers;
  my @widths = map { length($_) } @headers;
  my $regex = '^' . join('[ \t]+', map { '([^ \t]+)' } @widths) . '$';
  trimArrayLR(@rows);
  my @element_rows = ();
  foreach (@rows) {
    my @elements = $_ =~ m@$regex@;
    for (my $i = 0; $i < $num_columns; ++$i) {
      $widths[$i] = max($widths[$i], length($elements[$i]));
    }
    push @element_rows, \@elements;
  }
  for (my $i = 0; $i < $num_columns; ++$i) {
    print $headers[$i];
    if ($i != ($num_columns - 1)) {
      print ' ' x ($widths[$i] - length($headers[$i]) + 4);
    }
  }
  print "\n";
  say '------------------------------------------------------------------------------';
  foreach (@element_rows) {
    my @elements = @{$_};
    for (my $i = 0; $i < $num_columns; ++$i) {
      print $elements[$i];
      if ($i != ($num_columns - 1)) {
        print ' ' x ($widths[$i] - length($elements[$i]) + 4);
      }
    }
    print "\n";
  }
}


#-----------------------------------------------------------------------------
# Terminal colors
#-----------------------------------------------------------------------------
sub termColor {
  if ((-t STDOUT) && (-t STDERR)) {
    if (!defined($hasNcursesTput)) {
      my @ignored = qx{which tput};
      $hasNcursesTput = !($::CHILD_ERROR >> 8);
    }
    if ($hasNcursesTput) {
      my $color = shift;
      my $bold = (shift) ? 'bold' : 'sgr0';
      return qx{tput $bold 2>/dev/null ; tput setf $color 2>/dev/null};
    }
  }
  return '';
}
